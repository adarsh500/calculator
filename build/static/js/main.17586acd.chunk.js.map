{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","expression","setExpression","oldExpression","setOldExpression","previous","setPrevious","numerics","Set","operators","buttons","evaluateExpression","evaluation","eval","String","console","log","backspaceFunction","length","slice","putNumerics","value","putOperator","handleKeyUp","event","document","querySelector","focus","key","has","className","tabIndex","onKeyUp","style","backgroundColor","map","buttonValue","idx","onClick","color","position","bottom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"i1BAIA,SAASA,MAIP,cAAkCC,oDAAS,IAA3C,yLAAKC,WAAL,cAAiBC,cAAjB,cACA,WAAwCF,oDAAS,KAAjD,0LAAKG,cAAL,cAAoBC,iBAApB,cACA,WAA8BJ,oDAAS,OAAvC,0LAAKK,SAAL,cAAeC,YAAf,cAEIC,SAAW,IAAIC,IAAI,eACnBC,UAAY,IAAID,IAAI,WACpBE,QAAU,CAAC,IAAK,IAAK,IAAK,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAE3GC,mBAAqB,SAArBA,qBACF,IAAI,IAAIC,WAAaC,KAAKZ,YACxBG,iBAAiBH,WAAa,MAC9BC,cAAcY,OAAOF,aACrBN,YAAY,OACZ,eACES,QAAQC,IAAI,SAKdC,kBAAoB,WACnBhB,WAAWiB,QAAU,GACtBhB,cAAcD,WAAWkB,MAAM,GAAI,IAErCb,YAAY,QAGVc,YAAc,SAASC,GACR,QAAbhB,UAAmC,QAAbA,UACxBD,iBAAiB,SAAWH,YAC5BC,cAAcmB,IAEdnB,cAAcD,WAAaoB,GAE7Bf,YAAY,QAGVgB,YAAc,SAASD,GACR,OAAbhB,SACFH,cAAcD,WAAaoB,GACL,OAAbhB,UACTH,cAAcD,WAAWkB,MAAM,GAAI,GAAKE,GAE1Cf,YAAY,OAGRiB,YAAc,SAASC,GAC3BC,SAASC,cAAc,QAAQC,QACb,cAAdH,EAAMI,IACRX,oBACSV,SAASsB,IAAIL,EAAMI,KAC5BR,YAAYI,EAAMI,KACVnB,UAAUoB,IAAIL,EAAMI,KAC5BN,YAAYE,EAAMI,KACK,UAAdJ,EAAMI,KACfjB,sBAIJ,OACE,2DADqB,CACrB,OAAKmB,UAAU,MAAMC,SAAU,EAAGC,QAAST,YAA3C,UACA,mEAAKO,UAAU,aAAf,UACA,mEAAKA,UAAU,oBAAoBG,MAAO,CACtCC,gBAAiB,aADrB,UAGE,0EAAK/B,gBACL,0EAAKF,gBAIL,kEAAK6B,UAAU,YAAf,SAqBGpB,QAAQyB,KAAI,SAASC,EAAaC,GACjC,OAAO,qEAAQP,UAAU,kBAAkBQ,QAAS,WAC9B,OAAhBF,EACFnB,oBACSV,SAASsB,IAAIO,GACtBhB,YAAYgB,GACJ3B,UAAUoB,IAAIO,GACtBd,YAAYc,GACa,MAAhBA,GACTzB,sBARG,SAWHyB,YAKN,qEAAQH,MAAO,CACbM,MAAO,UACPC,SAAU,WACVC,OAAQ,QAHV,oDASO1C,2B,gIChHA2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACtD,EAAA,EAAD,MAEF0B,SAAS6B,eAAe,SAM1BZ,M","file":"static/js/main.17586acd.chunk.js","sourcesContent":["//import logo from './logo.svg';\nimport './App.css'; \nimport { useState } from \"react\";\n\nfunction App() {\n\n  \n\n  let [expression, setExpression] = useState(\"\");\n  let [oldExpression, setOldExpression] = useState(\"0\");\n  let [previous, setPrevious] = useState(\"ANS\");\n\n  let numerics = new Set(\"0123456789.\"); //its like the set in mathematics, it creates a set of items\n  let operators = new Set(\"+-/*%()\");\n  let buttons = [\"(\", \")\", \"%\", \"AC\", \"7\", \"8\", \"9\", \"/\", \"4\", \"5\", \"6\", \"*\", \"1\", \"2\", \"3\", \"-\", \"0\", \".\", \"=\", \"+\"];\n\n  let evaluateExpression = function(){\n    try{let evaluation = eval(expression);\n      setOldExpression(expression + \"= \");\n      setExpression(String(evaluation));\n      setPrevious(\"ANS\");}\n      catch{\n        console.log(\"ERR\");\n      }\n    \n  }\n\n  let backspaceFunction = function(){\n    if(expression.length >= 1) {\n      setExpression(expression.slice(0, -1)); //removes the last entered item\n    }\n    setPrevious(\"DEL\");\n  }\n\n  let putNumerics = function(value){\n    if (previous === \"ANS\" || previous === \"ERR\"){                 //value is nothing but event.key\n      setOldExpression(\"Ans = \" + expression);\n      setExpression(value);   \n    } else {\n      setExpression(expression + value);\n    }\n    setPrevious(\"NUM\");\n  }\n\n  let putOperator = function(value){\n    if (previous !== \"OP\") {\n      setExpression(expression + value);\n    } else if (previous === \"OP\"){\n      setExpression(expression.slice(0, -1) + value);\n    }\n    setPrevious(\"OP\");\n  }\n\n  const handleKeyUp = function(event){\n    document.querySelector(\".App\").focus();\n    if (event.key === \"Backspace\"){\n      backspaceFunction();\n    } else if (numerics.has(event.key)){     //numerics.has(event.key) checks if the key entered matches with the ones available in the numerics set\n      putNumerics(event.key);\n    } else if(operators.has(event.key)){\n      putOperator(event.key);\n    } else if (event.key === \"Enter\"){\n      evaluateExpression();\n    }\n    \n  }\n  return (               //tabIndex={0} sets the focus to the div element by default\n    <div className=\"App\" tabIndex={0} onKeyUp={handleKeyUp}> \n    <div className=\"calculator\">\n    <div className=\"calculatorDisplay\" style={{\n        backgroundColor: \"lightblue\"\n      }}>\n      <h5>{oldExpression}</h5>\n      <h1>{expression}</h1>\n      </div>\n\n\n      <div className=\"container\">\n        {/* <button className=\"container-items\">(</button>\n        <button className=\"container-items\">)</button>      //This is the NOOB method i.e. ME\n        <button className=\"container-items\">%</button>\n        <button className=\"container-items\">AC</button>\n        <button className=\"container-items\">9</button>\n        <button className=\"container-items\">8</button>\n        <button className=\"container-items\">7</button>\n        <button className=\"container-items\">/</button>\n        <button className=\"container-items\">6</button>\n        <button className=\"container-items\">5</button>\n        <button className=\"container-items\">6</button>\n        <button className=\"container-items\">*</button>\n        <button className=\"container-items\">3</button>\n        <button className=\"container-items\">2</button>\n        <button className=\"container-items\">1</button>\n        <button className=\"container-items\">-</button>\n        <button className=\"container-items\">0</button>\n        <button className=\"container-items\">.</button>\n        <button className=\"container-items\"> = </button>\n        <button className=\"container-items\">+</button> */}\n        {buttons.map(function(buttonValue, idx) {             //this is the pro method\n          return <button className=\"container-items\" onClick={function(){\n            if (buttonValue === \"AC\"){\n              backspaceFunction();\n            } else if (numerics.has(buttonValue)){     //numerics.has(event.key) checks if the key entered matches with the ones available in the numerics set\n              putNumerics(buttonValue);\n            } else if(operators.has(buttonValue)){\n              putOperator(buttonValue);\n            } else if (buttonValue === \"=\"){\n              evaluateExpression();\n            }\n            \n          }}>{buttonValue}</button>\n        })}\n    </div>\n    </div>\n      \n        <footer style={{\n          color: \"#282c34\",\n          position: \"absolute\",\n          bottom: \"20px\"\n        }}>Made with  ❤️   by Adarsh</footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}